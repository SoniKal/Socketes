
import java.io.*;
import java.net.Socket;
import java.security.*;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class Cliente {
    private static final long TIEMPO_ENTRE_MENSAJES = 3000;
    private KeyPair keyPair; // Par de claves RSA
    private PublicKey clavePublicaServidor; // Clave pública del servidor

    public static void main(String[] args) {
        Cliente cliente = new Cliente();
        cliente.iniciar();
    }

    public Cliente() {
        // Generar el par de claves RSA del cliente
        try {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048); // Tamaño de clave RSA
            keyPair = keyPairGenerator.generateKeyPair();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Cargar la clave pública del servidor desde un archivo
        try {
            FileInputStream fis = new FileInputStream("clave_publica_servidor.dat");
            byte[] clavePublicaBytes = new byte[fis.available()];
            fis.read(clavePublicaBytes);
            fis.close();

            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            X509EncodedKeySpec keySpec = new X509EncodedKeySpec(clavePublicaBytes);
            clavePublicaServidor = keyFactory.generatePublic(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void iniciar() {
        // Resto del código del cliente se mantiene igual
        // ...
    }

    // Agregar métodos para encriptar y desencriptar mensajes utilizando RSA
    public byte[] encriptarMensaje(String mensaje, PublicKey clavePublica) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, clavePublica);
            return cipher.doFinal(mensaje.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public String desencriptarMensaje(byte[] mensajeEncriptado) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, keyPair.getPrivate()); // Utilizar clave privada del cliente
            byte[] mensajeDesencriptado = cipher.doFinal(mensajeEncriptado);
            return new String(mensajeDesencriptado);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Resto del código se mantiene igual
    // ...
}
-------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

public class Servidor {
    private ServerSocket serverSocket;
    private static List<ClienteHandler> clientes;
    private PrivateKey clavePrivada; // Clave privada del servidor

    public static void main(String[] args) {
        Servidor servidor = new Servidor();
        servidor.iniciar();
    }

    public Servidor() {
        // Cargar la clave privada del servidor desde un archivo
        try {
            FileInputStream fis = new FileInputStream("clave_privada_servidor.dat");
            byte[] clavePrivadaBytes = new byte[fis.available()];
            fis.read(clavePrivadaBytes);
            fis.close();

            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(clavePrivadaBytes);
            clavePrivada = keyFactory.generatePrivate(keySpec);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void iniciar() {
        // Resto del código del servidor se mantiene igual
        // ...
    }

    // Agregar métodos para encriptar y desencriptar mensajes utilizando RSA
    public byte[] encriptarMensaje(String mensaje, PublicKey clavePublica) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.ENCRYPT_MODE, clavePublica);
            return cipher.doFinal(mensaje.getBytes());
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public String desencriptarMensaje(byte[] mensajeEncriptado) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, clavePrivada);
            byte[] mensajeDesencriptado = cipher.doFinal(mensajeEncriptado);
            return new String(mensajeDesencriptado);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Resto de la clase ClienteHandler se mantiene igual
    // ...
}
----------------------------------------------------------------------------------------------------------------
import java.security.*;
import java.util.Base64;

public class Mensaje {
    private String texto;
    private byte[] firma;

    public Mensaje(String texto, PrivateKey clavePrivadaEmisor) {
        this.texto = texto;
        this.firma = firmarMensaje(texto, clavePrivadaEmisor);
    }

    public String getTexto() {
        return texto;
    }

    public byte[] getFirma() {
        return firma;
    }

    // Método para firmar un mensaje con la clave privada del emisor
    private byte[] firmarMensaje(String mensaje, PrivateKey clavePrivada) {
        try {
            Signature firma = Signature.getInstance("SHA256withRSA");
            firma.initSign(clavePrivada);
            firma.update(mensaje.getBytes());
            return firma.sign();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Método para verificar la firma con la clave pública del emisor
    public boolean verificarFirma(PublicKey clavePublica) {
        try {
            Signature firma = Signature.getInstance("SHA256withRSA");
            firma.initVerify(clavePublica);
            firma.update(texto.getBytes());
            return firma.verify(firma);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Convierte el mensaje y la firma a una cadena codificada en Base64
    public String aBase64() {
        String mensajeCodificado = Base64.getEncoder().encodeToString(texto.getBytes());
        String firmaCodificada = Base64.getEncoder().encodeToString(firma);
        return mensajeCodificado + ":" + firmaCodificada;
    }

    // Convierte una cadena codificada en Base64 a un objeto Mensaje
    public static Mensaje desdeBase64(String mensajeBase64) {
        String[] partes = mensajeBase64.split(":");
        if (partes.length == 2) {
            String mensajeDecodificado = new String(Base64.getDecoder().decode(partes[0]));
            byte[] firmaDecodificada = Base64.getDecoder().decode(partes[1]);
            Mensaje mensaje = new Mensaje(mensajeDecodificado, null); // Clave privada se establecerá después
            mensaje.firma = firmaDecodificada;
            return mensaje;
        }
        return null;
    }
}
