basandonos en las siguientes clases de java:

ServidorOrig:

import java.io.BufferedReader; //lee datos que entran
import java.io.IOException; //excepcion de errores
import java.io.InputStreamReader; //igual que el primero
import java.io.PrintWriter; //escribe datos de salida
import java.net.ServerSocket; // establecen conexiones servidor - cliente
import java.net.Socket; // lo mismo que el de arriba
import java.util.ArrayList;
import java.util.List;

public class ServidorOrig {
    private ServerSocket ServerSockete;
    private static List<ClienteHandler> clientes;

    public static void main(String[] args) {
        ServidorOrig servidor = new ServidorOrig();
        servidor.iniciar();
    }

    public void iniciar() { // crea un serversocket que espera conexiones de clientes
        try {
            ServerSockete = new ServerSocket(6969);
            System.out.println("ServidorOrig iniciado. Esperando conexiones...");

            clientes = new ArrayList<>();

            while (true) { // loop infinito que acepta conexiones de clientes
                Socket clientSocket = ServerSockete.accept();
                System.out.println("Nueva conexión aceptada");

                ClienteHandler clienteHandler = new ClienteHandler(clientSocket); // crea un clientehandler x/cliente
                clientes.add(clienteHandler); //lo añade a la lista
                clienteHandler.start(); //empieza el hilo de comunicacion
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (ServerSockete != null) {
                try {
                    ServerSockete.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private class ClienteHandler extends Thread { // al extender de thread, cada uno se ejecuta en un hilo diferente
        private Socket clientSockete;
        private PrintWriter out;
        private BufferedReader in;
        private String username;

        public ClienteHandler(Socket socket) {

            clientSockete = socket;
        }

        public void run() {
            try {
                out = new PrintWriter(clientSockete.getOutputStream(), true); // establece flujos entrada y salida
                in = new BufferedReader(new InputStreamReader(clientSockete.getInputStream()));

                out.println("Ingresa nombre de usuario:");
                username = in.readLine();
                System.out.println("Nuevo usuario: " + username);

                String mensaje;
                while ((mensaje = in.readLine()) != null) { //loop : escucha mensajes de clientes y los muestra
                    System.out.println("ClienteServidor_Extra.Mensaje recibido de " + username + ": " + mensaje);

                // difunde el mensaje que el cliente envio hacia los demas ; excepto a el mismo
                    for (ClienteHandler cliente : ServidorOrig.this.clientes) {
                        if (cliente != this) {
                            cliente.enviarMensaje(username + ": " + mensaje);
                        }
                    }
                }

                System.out.println("Usuario desconocido: " + username);
                clientes.remove(this);
                clientSockete.close();

            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (out != null) {
                    out.close();
                }
                try {
                    if (in != null) {
                        in.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        public void enviarMensaje(String mensaje) {
            out.println(mensaje);
        }
    }
}

y la clase ClienteOrig:

import java.io.BufferedReader;//lee datos que entran
import java.io.IOException;//excepcion de errores
import java.io.InputStreamReader;
import java.io.PrintWriter;//escribe datos de salida
import java.net.Socket;

public class ClienteOrig {
    private static final long TIEMPO_ENTRE_MENSAJES = 3000; // 3 segundos de espera para evitar spam


    // ANTES DE EJECUTAR: EL SERVIDOR DEBE ESTAR ABIERTO //

    public static void main(String[] args) {
        try {
            // establece una conexión con el servidor donde está esa IP representada abajo
            Socket socket = new Socket("172.16.255.201", 6969);
            PrintWriter escritor = new PrintWriter(socket.getOutputStream(), true);
            BufferedReader lector = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            BufferedReader lectorConsola = new BufferedReader(new InputStreamReader(System.in));

            // recibe y muestra el nombre de usuario asignado
            String nombreUsuario = lector.readLine();
            System.out.println("¡Bienvenido, " + nombreUsuario + "!");

            // hilo que recibe mensajes del servidor
            Thread hiloRecibirMensajes = new Thread(() -> {
                try {
                    String mensaje;
                    while ((mensaje = lector.readLine()) != null) {
                        System.out.println(mensaje);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
            hiloRecibirMensajes.start();

            // hilo qye envia mensajes al servidor
            Thread hiloEnviarMensajes = new Thread(() -> {
                try {
                    String mensajeUsuario;
                    while ((mensajeUsuario = lectorConsola.readLine()) != null) {
                        escritor.println(mensajeUsuario);
                        Thread.sleep(TIEMPO_ENTRE_MENSAJES); // espera de mensajes (para que no se envien rapido)
                    }
                } catch




                (IOException | InterruptedException e) {
                    e.printStackTrace();
                }
            });
            hiloEnviarMensajes.start();

            // espera que ambos hilos terminen antes de cerrar los recursos
            hiloRecibirMensajes.join();
            hiloEnviarMensajes.join();

            // cierra los recursos utilizados
            escritor.close();
            lector.close();
            lectorConsola.close();
            socket.close();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

}

reescribir ambas clases para que los mensajes esten encriptados de manera asimetrica con el metodo ClienteServidor_Extra.RSA
para esto crear una nueva clase llamada "ClienteServidor_Extra.Mensaje" que cuente con el texto en forma de String y la firma digital
utilizar solo librerias y metodos basicos
modificar para que las PCs conectadas al servidor se envien entre si esta Clase "ClienteServidor_Extra.Mensaje"